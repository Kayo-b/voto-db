#!/usr/bin/env python3
"""
Script para testar o sistema de an√°lise de vota√ß√µes
"""

import sys
import os
sys.path.append(os.path.dirname(os.path.abspath(__file__)))

from analisador_votacoes import AnalisadorVotacoes
import json
from datetime import datetime

def main():
    print("üöÄ Testando Sistema de An√°lise de Vota√ß√µes")
    print("=" * 60)
    
    # Initialize analyzer
    analisador = AnalisadorVotacoes()
    
    # Test 1: Search for a proposition
    print("\nüìã TESTE 1: Buscar Proposi√ß√£o")
    print("-" * 40)
    proposicao = analisador.buscar_proposicao("PL", 6787, 2016)
    
    if proposicao:
        print(f"‚úÖ Proposi√ß√£o encontrada:")
        print(f"   ID: {proposicao['id']}")
        print(f"   Ementa: {proposicao.get('ementa', 'N/A')[:100]}...")
    else:
        print("‚ùå Proposi√ß√£o n√£o encontrada")
        return
    
    # Test 2: Process complete proposition analysis
    print("\nüîç TESTE 2: An√°lise Completa de Proposi√ß√£o")
    print("-" * 40)
    
    resultado = analisador.processar_proposicao_completa(
        tipo="PL",
        numero=6787,
        ano=2016,
        titulo="Lei da Terceiriza√ß√£o",
        relevancia="alta"
    )
    
    if resultado:
        print(f"‚úÖ An√°lise conclu√≠da:")
        print(f"   Proposi√ß√£o: {resultado['proposicao']['titulo']}")
        print(f"   ID Vota√ß√£o Principal: {resultado['votacao_principal']['id']}")
        print(f"   Total de Votos: {resultado['votacao_principal']['total_votos']}")
        
        # Show voting statistics
        stats = resultado['estatisticas_votacao']
        print(f"   Distribui√ß√£o de Votos:")
        for tipo, quantidade in stats['distribuicao_votos'].items():
            if quantidade > 0:
                print(f"     {tipo}: {quantidade}")
        
        # Save result
        analisador.salvar_dados(resultado, "teste_proposicao_6787_2016.json")
    else:
        print("‚ùå N√£o foi poss√≠vel processar a proposi√ß√£o")
        return
    
    # Test 3: Analyze deputy profile
    print("\nüë§ TESTE 3: An√°lise de Perfil de Deputado")
    print("-" * 40)
    
    # Find a deputy ID from the voting results
    votos = resultado.get('votos', [])
    if votos:
        primeiro_voto = votos[0]
        deputado_data = primeiro_voto.get('deputado_', {})
        deputado_id = deputado_data.get('id')
        deputado_nome = deputado_data.get('nome')
        
        if deputado_id:
            print(f"üîç Analisando deputado: {deputado_nome} (ID: {deputado_id})")
            
            analise = analisador.analisar_deputado(deputado_id, [resultado])
            
            if analise.get('deputado'):
                dep_info = analise['deputado']
                stats = analise['estatisticas']
                
                print(f"‚úÖ An√°lise do deputado:")
                print(f"   Nome: {dep_info['nome_parlamentar']}")
                print(f"   Partido: {dep_info['partido']} - {dep_info['uf']}")
                print(f"   Participa√ß√£o: {stats['participacao']}/{stats['total_votacoes_analisadas']}")
                print(f"   Presen√ßa: {stats['presenca_percentual']}%")
                
                # Save deputy analysis
                analisador.salvar_dados(analise, f"teste_deputado_{deputado_id}.json")
            else:
                print("‚ùå Erro na an√°lise do deputado")
    
    # Test 4: Load propositions data
    print("\nüìä TESTE 4: Carregar Proposi√ß√µes Relevantes")
    print("-" * 40)
    
    try:
        dados_proposicoes = analisador.carregar_dados("proposicoes.json")
        if dados_proposicoes:
            proposicoes = dados_proposicoes.get("proposicoes_relevantes", [])
            print(f"‚úÖ {len(proposicoes)} proposi√ß√µes relevantes carregadas:")
            
            for i, prop in enumerate(proposicoes[:5], 1):  # Show first 5
                print(f"   {i}. {prop['tipo']} {prop['numero']}/{prop['ano']} - {prop['titulo']}")
            
            if len(proposicoes) > 5:
                print(f"   ... e mais {len(proposicoes) - 5} proposi√ß√µes")
        else:
            print("‚ùå N√£o foi poss√≠vel carregar dados de proposi√ß√µes")
    except Exception as e:
        print(f"‚ùå Erro ao carregar proposi√ß√µes: {e}")
    
    print(f"\nüéâ Testes conclu√≠dos em {datetime.now().strftime('%H:%M:%S')}")
    print("=" * 60)
    
    # Summary
    print("\nüìã RESUMO DOS ARQUIVOS GERADOS:")
    data_dir = analisador.data_dir
    try:
        arquivos = os.listdir(data_dir)
        arquivos_json = [f for f in arquivos if f.endswith('.json')]
        
        for arquivo in arquivos_json:
            caminho = os.path.join(data_dir, arquivo)
            tamanho = os.path.getsize(caminho) / 1024  # KB
            print(f"   üìÑ {arquivo} ({tamanho:.1f} KB)")
    except Exception as e:
        print(f"‚ùå Erro ao listar arquivos: {e}")

if __name__ == "__main__":
    main()